{"version":3,"sources":["logo.svg","resume.jpg","card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","cards","cdata","Data","details","console","log","imgs","Pic","Logo","class","id","map","values","index","key","src","card","name","href","email","roll","mobile","desc","clg","to","pathname","personcd","App","className","exact","path","Component","Card","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,qWCA3CD,EAAOC,QAAU,IAA0B,oC,2PCsC5BC,EAhCL,WACR,IAAIC,EAAMC,EAAKC,QACfC,QAAQC,IAAIJ,GACZ,IAAIK,EAAK,CAACC,IAAIC,KACd,OACE,6BACE,wBAAIC,MAAM,YAAYC,GAAG,QAAzB,+BACA,yBAAKD,MAAM,OAETR,EAAMU,KAAI,SAACC,EAAOC,GAAR,OACR,yBAAKJ,MAAM,qBAAqBK,IAAKD,GACnC,yBAAKJ,MAAM,QACT,yBAAKM,IAAKT,EAAKO,GAAQJ,MAAM,cAC7B,6BACA,4BAAKG,EAAOI,KAAKC,MACjB,uBAAGC,KAAM,UAAUN,EAAOI,KAAKG,OAAQP,EAAOI,KAAKG,OACnD,0CAAgBP,EAAOI,KAAKI,MAC5B,qCAAWR,EAAOI,KAAKK,QACvB,oCAAUT,EAAOI,KAAKM,MACtB,uCAAaV,EAAOI,KAAKO,KACzB,kBAAC,IAAD,CAAMC,GAAI,CAACC,SAAS,UAAUC,SAAS,CAAChB,GAAGG,IAASJ,MAAM,sBAA1D,qB,OCLCkB,E,uKAbX,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,EAAD,Y,GANQC,IAAMF,WCMJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.ca106784.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/resume.3d1df7b4.jpg\";","import React from 'react';\r\nimport Data from './data.json';\r\nimport Logo from './logo.svg';\r\nimport Pic from './resume.jpg';\r\nimport {Link} from 'react-router-dom';\r\n\r\nlet cards=()=>{\r\n  let cdata=Data.details;\r\n  console.log(cdata);\r\n  let imgs=[Pic,Logo];\r\n  return(\r\n    <div>\r\n      <h1 class=\"text-body\" id=\"hedr\">This is my Resume Home page</h1>\r\n      <div class=\"row\">\r\n      {\r\n        cdata.map((values,index)=>(\r\n          <div class=\"col-10 col-md-4 cp\" key={index}>\r\n            <div class=\"card\">\r\n              <img src={imgs[index]} class=\"img-fluid\"/>\r\n              <hr/>\r\n              <h1>{values.card.name}</h1>\r\n              <a href={\"mailto:\"+values.card.email}>{values.card.email}</a>\r\n              <p>Roll number:{values.card.roll}</p>\r\n              <p>Ph no: {values.card.mobile}</p>\r\n              <p>Role: {values.card.desc}</p>\r\n              <p>College: {values.card.clg}</p>\r\n              <Link to={{pathname:\"/resume\",personcd:{id:index}}} class=\"btn lk btn-success\">My Resume</Link>\r\n            </div>\r\n          </div>\r\n        ))\r\n      }\r\n      </div>\r\n\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\nexport default cards;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from \"./card.js\";\nimport {BrowserRouter,Route} from 'react-router-dom'\n\nclass App extends React.Component{\n  render(){\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <Route exact path=\"/\" Component={Card}/>\n          <Card/>\n        </BrowserRouter>\n      </div>\n      // <div>\n      //   <Card/>\n      // </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}